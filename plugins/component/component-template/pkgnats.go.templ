{{ if or .ComponentNatsJetstream .ComponentNatsKeyValue .ComponentNatsCore .ExportNatsCoreRequestReplyWit -}}
package nats
import (

{{ if or .ExportNatsCoreRequestReplyWit .ImportNatsCoreWit -}}
	 "errors"
	 {{ end -}}
	{{ if or .ExportNatsCoreRequestReplyWit .ImportNatsCoreWit -}}
	"{{ .Repository }}/gen/wasmcloud/messaging/consumer"
	{{ end -}}
	{{ if or .ExportNatsCoreRequestReplyWit .ExportNatsCoreWit -}}
	"{{ .Repository }}/gen/wasmcloud/messaging/handler"
	{{ end -}}
	{{ if or .ExportNatsCoreRequestReplyWit .ExportNatsCoreWit .ImportNatsCoreWit -}}
	"{{ .Repository }}/gen/wasmcloud/messaging/types"
	{{ end -}}
	{{ if or .ExportNatsCoreRequestReplyWit .ExportNatsCoreWit .ImportNatsCoreWit -}}
	"github.com/bytecodealliance/wasm-tools-go/cm"
        {{ end -}}
)
type (
	Conn struct {
        {{ if or .ComponentNatsJetstream .ComponentNatsKeyValue -}}
		  js JetStreamContext
	{{ end -}}
	}
	{{ if or .ComponentNatsJetstream .ComponentNatsKeyValue -}}
	JetStreamContext struct {
		{{ if or .ImportNatsKvWit .ExportNatsKvWit -}}
		bucket KeyValue
		{{ end -}}
	}
	{{ end -}}

	Msg struct {
		Subject string
		Reply   string
		Data    []byte
		Header  map[string][]string
	}
)

func NewConn() *Conn {
	return &Conn{}
}
{{ if or .ExportNatsCoreWit .ExportNatsJetstreamWit -}}
type MsgHandler func(msg *Msg)
{{ end -}}

{{ if or .ExportNatsCoreWit .ExportNatsCoreRequestReplyWit -}}
func FromBrokerMessageToNatsMessage(bm types.BrokerMessage) *Msg {
	if bm.ReplyTo.None() {
		return &Msg{
			Data:    bm.Body.Slice(),
			Subject: bm.Subject,
			Reply:   "",
		}
	} else {
		return &Msg{
			Data:    bm.Body.Slice(),
			Subject: bm.Subject,
			Reply:   *bm.ReplyTo.Some(),
		}
	}
}
{{ end }}

	{{ if or .ExportNatsCoreRequestReplyWit .ExportNatsCoreWit .ImportNatsCoreWit -}}
func ToBrokenMessageFromNatsMessage(nm *Msg) types.BrokerMessage {
	if nm.Reply == "" {
		return types.BrokerMessage{
			Subject: nm.Subject,
			Body:    cm.ToList(nm.Data),
			ReplyTo: cm.None[string](),
		}
	} else {
		return types.BrokerMessage{
			Subject: nm.Subject,
			Body:    cm.ToList(nm.Data),
			ReplyTo: cm.Some(nm.Subject),
		}
	}
}
{{ end -}}
{{ if or .ImportNatsCoreWit .ExportNatsCoreRequestReplyWit -}}
func (nc *Conn) Publish(msg *Msg) error {
	bm := ToBrokenMessageFromNatsMessage(msg)
	result := consumer.Publish(bm)
	if result.IsErr() {
		return errors.New(*result.Err())
	}
	return nil
}
{{ end -}}

{{ if .ExportNatsCoreRequestReplyWit -}}
func (conn *Conn) RequestReply(msg *Msg, timeoutInMillis uint32) (*Msg, error) {
	bm := ToBrokenMessageFromNatsMessage(msg)
	result := consumer.Request(bm.Subject, bm.Body, timeoutInMillis)
	if result.IsOK() {
		bmReceived := result.OK()
		natsMsgReceived := FromBrokerMessageToNatsMessage(*bmReceived)
		return natsMsgReceived, nil
	} else {
		return nil, errors.New(*result.Err())
	}
}

func (conn *Conn) RegisterRequestReply(fn func(*Msg) *Msg) {
	handler.Exports.HandleMessage = func(msg types.BrokerMessage) (result cm.Result[string, struct{}, string]) {
		natsMsg := FromBrokerMessageToNatsMessage(msg)
		newMsg := fn(natsMsg)
		return consumer.Publish(ToBrokenMessageFromNatsMessage(newMsg))
	}
}
{{ end -}}
{{ if .ExportNatsCoreWit -}}
func (conn *Conn) RegisterSubscription(fn func(*Msg)) {
	handler.Exports.HandleMessage = func(msg types.BrokerMessage) (result cm.Result[string, struct{}, string]) {
		natsMsg := FromBrokerMessageToNatsMessage(msg)
		fn(natsMsg)
		return cm.OK[cm.Result[string, struct{}, string]](struct{}{})
	}
}
{{ end }}
{{ end }}
