//go:generate go run github.com/bytecodealliance/wasm-tools-go/cmd/wit-bindgen-go generate -world {{ .ComponentName }} -out gen ./wit
package main

import (
	"log/slog"
	
	"go.wasmcloud.dev/component/log/wasilog"	
	{{ if or .ComponentNatsJetstream .ComponentNatsCore .ComponentNatsKeyValue}}
	"{{ .Repository }}/pkg/nats"
	{{ end -}}
	{{ if .ComponentCronJob }}
	"{{ .Repository }}/pkg/cronjob"
	{{ end -}}
)
var (
	logger *slog.Logger
	{{ if or .ComponentNatsCore .ComponentNatsKeyValue .ComponentNatsJetstream .ExportNatsCoreRequestReplyWit -}}
	conn *nats.Conn
	{{ end -}}
	{{ if or .ComponentNatsJetstream .ComponentNatsKeyValue -}}
	js *nats.JetStreamContext
	{{ end -}}
	{{ if .ComponentNatsKeyValue -}}
	kv *nats.KeyValue
	{{ end }}
)
func init() { 
	logger = wasilog.ContextLogger("{{ .ComponentName }}")
	{{ if or .ComponentNatsCore .ComponentNatsKeyValue .ComponentNatsJetstream -}}
	conn := nats.NewConn()
        {{ end -}}
	{{ if .ExportNatsCoreRequestReplyWit -}}
	conn.RegisterRequestReply({{.ComponentName}}RequestReplier)
	{{ end -}}
	{{ if .ExportNatsCoreWit -}}
        conn.RegisterSubscription({{ .ComponentName }}Subscriber)
	{{ end -}}
	{{ if .ImportNatsCoreWit -}}
	//nats-core publish
	msg := &nats.Msg{Subject: "some-subject", Reply: "", Data: []byte("hello world")}
	conn.Publish(msg)
	{{ end -}}
	{{ if or .ComponentNatsJetstream .ComponentNatsKeyValue -}}
	var err error
	js, err = conn.Jetstream()
	if err != nil {
		logger.Error("error getting jetstreamcontext", "err", err)
		return
	}
	{{ end -}}
	{{ if .ImportNatsJetstreamWit -}}
        jsPubErr := js.Publish("some-subject", []byte("some data"))
	if jsPubErr != nil {
		logger.Error("error publishing message", "err", jsPubErr) //most likely due to no streams listenong your subject
	}
        {{ end -}}
	{{ if .ComponentNatsKeyValue -}}
	kv, err = js.KeyValue()
	if kv == nil {
		logger.Error("error getting keyvalue", "err", err)
		return
	}
	{{ end -}}
	{{ if .ExportNatsJetstreamWit -}}
        js.Subscribe({{.ComponentName}}Consumer, logger)	
	{{ end -}}
	{{ if .ExportNatsKvWit -}}
	kv.RegisterKvWatchAll({{ .ComponentName }}Watcher)
	{{ end -}}
	{{ if .ComponentCronJob -}}
	cronjob.RegisterCronHandler({{.ComponentName}}CronHandler)
	{{ end -}}
}

{{ if .ComponentCronJob -}}
func {{.ComponentName}}CronHandler() {
    logger.Info("Cronjob handler called")
}
{{ end -}}
{{ if .ExportNatsKvWit -}}
func {{.ComponentName}}Watcher(kv *nats.KeyValueEntry) {
  logger.Info("keyvalue watcher", "key", kv.Key, "value", string(kv.Value))
}
{{ end -}}

{{ if .ExportNatsJetstreamWit }}
func {{ .ComponentName }}Consumer(msg *nats.Msg) {
// this is where you put your application logic when a nats msg arrives at specified stream subject from wadm.yaml
}
{{ end }}
{{ if .ExportNatsCoreRequestReplyWit }}
func {{.ComponentName}}RequestReplier(msg *nats.Msg) *nats.Msg {
// here you'll read from incomming msg and take out the msg.Reply and put into your own created msg
// and return it, and the provider will take it from there
replyMsg := &nats.Msg{
		Subject: msg.Reply,
		Data:    msg.Data,
	}
return replyMsg
}
{{ end }}
{{ if .ExportNatsCoreWit }}
func {{ .ComponentName }}Subscriber(msg *nats.Msg) {
// this is where you put your application logic when a nats msg arrives at specified subject, specified under wadm.yaml nats-core 'subscriptions'
// here you can use nats.Publish or kv.Get, etc depending on what you asked for
}
{{ end }}
//main should never be used in a wasm component, everything inside init()
func main() {}
