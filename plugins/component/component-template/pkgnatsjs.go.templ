{{if or .ImportNatsJetstreamWit  .ExportNatsJetstreamWit .ImportNatsKvWit .ExportNatsKvWit -}}
package nats

{{ if or .ImportNatsJetstreamWit .ExportNatsJetstreamWit -}}
import (
	"log/slog"
	"github.com/bytecodealliance/wasm-tools-go/cm"
	"{{.Repository}}/gen/mattilsynet/provider-jetstream-nats/jetstream-consumer"
	"{{.Repository}}/gen/mattilsynet/provider-jetstream-nats/jetstream-publish"
	jetstream_types "{{.Repository}}/gen/mattilsynet/provider-jetstream-nats/types"
	"errors"
)
{{ end -}}
func (c *Conn) Jetstream() (*JetStreamContext, error) {
	return &c.js, nil
}
{{ if .ExportNatsJetstreamWit -}}
func (js *JetStreamContext) Subscribe(msgHandler MsgHandler, logger *slog.Logger) {
	jetstreamconsumer.Exports.HandleMessage = toWitExportSubscription(msgHandler)
}

func toNatsHeaders(header cm.List[jetstream_types.KeyValue]) map[string][]string {
	natsHeaders := make(map[string][]string)
	for _, kv := range header.Slice() {
		natsHeaders[kv.Key] = kv.Value.Slice()
	}
	return natsHeaders
}


func toWitExportSubscription(msgHandler MsgHandler) func(msg jetstream_types.Msg) cm.Result[string, struct{}, string] {
	return func(msg jetstream_types.Msg) cm.Result[string, struct{}, string] {
		natsMsg := &Msg{
			Subject: msg.Subject,
			Reply:   msg.Reply,
			Data:    msg.Data.Slice(),
			Header:  toNatsHeaders(msg.Headers),
		}
		msgHandler(natsMsg)
		return cm.OK[cm.Result[string, struct{}, string]](struct{}{})
	}
}

{{ end -}}
{{ if or .ImportNatsJetstreamWit .ExportNatsJetstreamWit -}}
func (js *JetStreamContext) Publish(subj string, data []byte) error {
	return js.PublishMsg(&Msg{Subject: subj, Data: data})
}

func (js *JetStreamContext) PublishMsg(msg *Msg) error {
	jpMsg := jetstream_types.Msg{
		Headers: toWitNatsHeaders(msg.Header),
		Data:    cm.ToList(msg.Data),
		Subject: msg.Subject,
	}
	result := jetstreampublish.Publish(jpMsg)
	if !result.IsOK() {
		return errors.New(*result.Err())
	}
	return nil
}

func toWitNatsHeaders(header map[string][]string) cm.List[jetstream_types.KeyValue] {
	keyValueList := make([]jetstream_types.KeyValue, 0)
	for k, v := range header {
		keyValueList = append(keyValueList, jetstream_types.KeyValue{
			Key:   k,
			Value: cm.ToList(v),
		})
	}
	return cm.ToList(keyValueList)
}
{{ end -}}
{{ end }}
